/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

/**
 * Struct to store usage data of the window
*/
export interface UsageInfo {
  memory: number
}
/**
 * Struct to store process information of the window
*/
export interface ProcessInfo {
  processId: number
  path: string
  name: string
  execName: string
}
/**
 * Struct to store position and size of the window
*/
export interface WindowPosition {
  x: number
  y: number
  width: number
  height: number
}
/**
 * Struct to store all informations of the window
*/
export interface WindowInfo {
  id: number
  os: string
  title: string
  position: WindowPosition
  info: ProcessInfo
  usage: UsageInfo
  url: string
}
/**
 * Retrieve information the about currently active window.
 * Returns an object of `WindowInfo`.
 *
 * # Example
 * ```javascript
 * const currentWindow = activeWindow();
 * console.log(currentWindow);
 * ```
 *
 * # Information about Electron
 *
 * It is recommended to use this function within a worker to mitigate potential recovery issues on MacOS.
*/
export function activeWindow(): WindowInfo
/**
 * Retrieve information about the currently active window as a promise.
 * Returns an object of `WindowInfo`.
 *
 * # Example
 * ```javascript
 * activeWindow()
 * .then(currentWindow => {
 *   console.log(currentWindow);
 * });
 * ```
 *
 * # Information about Electron
 *
 * It is recommended to use this function within a worker to mitigate potential recovery issues on MacOS.
*/
export function activeWindowAsync(): Promise<WindowInfo>
/**
 * Retrieve information about the currently open windows.
 * Returns an array of `WindowInfo`, each containing details about a specific open window.
 *
 * # Example
 * ```javascript
 * const windows = openWindows();
 * for (let i = 0; i < windows.length; i++) {
 *   console.log(i, windows[i]);
 * }
 * ```
 *
 * # Information about Electron
 *
 * It is recommended to use this function within a worker to mitigate potential recovery issues on MacOS.
*/
export function openWindows(): Array<WindowInfo>
/**
 * Retrieve information about the currently open windows as a promise.
 * Returns an array of `WindowInfo`, each containing details about a specific open window.
 *
 * # Example
 * ```javascript
 * openWindows()
 * .then(windows => {
 *   for (let i = 0; i < windows.length; i++) {
 *     console.log(i, windows[i]);
 *   }
 * });
 * ```
 *
 * # Information about Electron
 *
 * It is recommended to use this function within a worker to mitigate potential recovery issues on MacOS.
*/
export function openWindowsAsync(): Promise<Array<WindowInfo>>
/**
 * Subscribe an observer thread to monitor changes in the active window.
 *
 * # Example
 * ```javascript
 * const a = subscribeActiveWindow((info) => {
 *   t.log(a, info);
 * });
 * const b = subscribeActiveWindow((info) => {
 *   t.log(b, info);
 * });
 * const c = subscribeActiveWindow((info) => {
 *   t.log(c, info);
 * });
 *
 * unsubscribeAllActiveWindow();
 * ```
*/
export function subscribeActiveWindow(callback: (info: WindowInfo) => void): number
/**
 * Terminate and unsubscribe a specific observer using their ID.
 *
 * # Example
 * ```javascript
 * const a = subscribeActiveWindow((info) => {
 *   t.log(a, info);
 * });
 * const b = subscribeActiveWindow((info) => {
 *   t.log(b, info);
 * });
 * const c = subscribeActiveWindow((info) => {
 *   t.log(c, info);
 * });
 *
 * unsubscribeActiveWindow(a);
 * unsubscribeActiveWindow(b);
 * unsubscribeActiveWindow(c);
 * ```
*/
export function unsubscribeActiveWindow(threadId: number): void
/**
 * Terminate and unsubscribe all observer threads monitoring changes in the active window.
 *
 * # Example
 * ```javascript
 * const a = subscribeActiveWindow((info) => {
 *   t.log(a, info);
 * });
 * const b = subscribeActiveWindow((info) => {
 *   t.log(b, info);
 * });
 * const c = subscribeActiveWindow((info) => {
 *   t.log(c, info);
 * });
 *
 * unsubscribeAllActiveWindow();
 * ```
*/
export function unsubscribeAllActiveWindow(): void
